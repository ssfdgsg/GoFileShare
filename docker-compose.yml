services:
  # 这是你的 Go 应用服务
  app:
    # 使用你项目中的 Dockerfile进行构建
    build: .
    container_name: go-app-service
    restart: on-failure
    ports:
      # 将你主机的 8080 端口映射到容器的 8080 端口
      # 如果你的 Go 应用监听其他端口，请修改这里的第二个 8080
      - "8080:8080"
    environment:
      # 这里设置的环境变量，会被Go代码中的 os.Getenv() 读取
      - DB_HOST=db         # 关键！主机名就是下面的数据库服务名'db'
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=123456 # 这是你代码里原来的密码
      - DB_NAME=gotest
    depends_on:
      # 告诉 Docker，app服务依赖于db服务
      # 它会等db容器启动后，再启动app容器
      db:
        condition: service_healthy

  # 这是 MySQL 数据库服务
  db:
    image: mysql:latest
    container_name: mysql-db-service
    restart: always
    environment:
      # 这些是 MySQL 镜像自身需要的环境变量
      - MYSQL_ROOT_PASSWORD=123456  # 设置root用户的密码
      - MYSQL_DATABASE=gotest       # MySQL启动时会自动创建这个数据库
    ports:
      # 将主机的 3307 端口映射到容器的 3306 端口
      # 我用了 3307 是为了避免和你主机上已有的 3306 冲突
      # 你也可以用 "3306:3306"，但要确保主机 3306 端口没被占用
      - "3307:3306"
    volumes:
      # 数据持久化，将数据库文件保存在主机上，防止容器删除后数据丢失
      - mysql-data:/var/lib/mysql
    healthcheck:
      # 健康检查，确保数据库真正准备好接受连接了
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456"]
      interval: 10s
      timeout: 5s
      retries: 5

# 定义一个具名卷，用于数据持久化
volumes:
  mysql-data:
